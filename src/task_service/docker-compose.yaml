services:
  postgres:
    container_name: task-service-postgres
    image: postgres:16-alpine
    environment:
      POSTGRES_DB: task-service
      POSTGRES_USER: task-service
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: "/var/lib/postgresql/data/pgdata"
    volumes:
      - ./db_migrations:/docker-entrypoint-initdb.d
      - task-service-postgres-db:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready -U task-service -d task-service
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 4G
    networks:
      - task-service
  server:
    container_name: task-service-app
    build:
      context: .
      dockerfile: dockerfile
    environment:
      POSTGRES_NAME: task-service
      POSTGRES_HOST: task-service-postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: 5432
      POSTGRES_USER: task-service
    depends_on:
      postgres:
        condition: service_healthy
      init-kafka:
        condition: service_completed_successfully
    ports:
      - "443:443"
      - "80:80"
    networks:
      - task-service
  kafka:
    container_name: kafka
    image: apache/kafka:latest
    ports:
      - 9093:9093
    healthcheck:
      test: cd /opt/kafka/bin/ && ./kafka-topics.sh --bootstrap-server kafka:9092 --list
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      # KRaft
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9091
      
      # Listeners
      KAFKA_LISTENERS: CONTROLLER://localhost:9091,DOCKER://0.0.0.0:9092,HOST://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: DOCKER://kafka:9092,HOST://localhost:9093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,DOCKER:PLAINTEXT,HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: DOCKER

      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: false
    volumes:
     - kafka-data:/var/lib/kafka/data
  init-kafka:
    image: apache/kafka:latest
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      cd /opt/kafka/bin/
      # blocks until kafka is reachable
      
      echo -e 'Creating kafka topics'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --if-not-exists --create --topic detect-primitives
      ./kafka-topics.sh --bootstrap-server kafka:9092 --if-not-exists --create --topic classify-image
      ./kafka-topics.sh --bootstrap-server kafka:9092 --if-not-exists --create --topic detected-primitives
      ./kafka-topics.sh --bootstrap-server kafka:9092 --if-not-exists --create --topic classified-image

      echo -e 'Successfully created the following topics:'
      ./kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
  detection_model_1:
    container_name: detection-model-service
    build:
      context: ../detection_model_service
      dockerfile: ../detection_model_service/dockerfile
    networks:
      - task-service
    depends_on:
      init-kafka:
        condition: service_completed_successfully

volumes:
  task-service-postgres-db:
  kafka-data:

networks:
  task-service:
    driver: bridge