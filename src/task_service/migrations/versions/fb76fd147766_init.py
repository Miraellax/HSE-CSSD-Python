"""Init

Revision ID: fb76fd147766
Revises: 
Create Date: 2025-03-28 19:31:36.265497

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.orm import Session

from src.task_service.src.modules.db_models.models import (SceneClass,
                                                           PrimitiveClass,
                                                           Status,
                                                           DetectionModels,
                                                           ClassificationModels,
                                                           Users,
                                                           Tasks,
                                                           PrimitivePredictions,
                                                           SceneClassPredictions
                                                           )


# revision identifiers, used by Alembic.
revision: str = 'fb76fd147766'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


# Словарь классов сцен
dbSceneClasses = [
    SceneClass(
        scene_class="office"),
    SceneClass(
        scene_class="warehouse"),
    SceneClass(
        scene_class="greenhouse"),
    SceneClass(
        scene_class="livingroom"),
]

# Словарь классов примитивов
dbPrimitiveClasses = [
    PrimitiveClass(
        primitive_class="cube"),
    PrimitiveClass(
        primitive_class="sphere"),
    PrimitiveClass(
        primitive_class="cone"),
    PrimitiveClass(
        primitive_class="torus"),
    PrimitiveClass(
        primitive_class="cylinder")
]

# Словарь статусов
dbStatuses = [
    Status(status="queued"),
    Status(status="in progress"),
    Status(status="done")
]

# Словарь моделей детекции
dbDModels = [
    DetectionModels(name="YOLOv11m-obb"),
    ClassificationModels(name="GRU_model_v1"),
    ClassificationModels(name="GRU_model_v2_binary")
]

# Тестовые данные
dbUsers = [
    Users(username="first",
        hashed_password="$2b$12$SmZBPfFaw78FguMgRarX5e1iKckloh6Pi/3Q1ZSGuOzC345gHRL8C"), # 111
    Users(username="second",
        hashed_password="$2b$12$n8evGhlqi4pJHmiykHfFzuEqPnE2qLhl1apdj9/.D8cbHCGZmTejO"), # 222
]

dbTasks = [
    Tasks(
        owner_id=1,
        # created_at="2024-04-25T18:25:43.511Z",
        scene_class_id=1,
        detection_model_id=1,
        classification_model_id=1,
        status_id=3,
        input_path="images\\img_1.png"
    ),
    Tasks(
        owner_id=1,
        # created_at="2024-04-25T18:25:43.511Z",
        scene_class_id=None,
        detection_model_id=1,
        classification_model_id=1,
        status_id=1,
        input_path="images\\img_2.png"
    ),
    Tasks(
        owner_id=1,
        # created_at="2024-04-25T18:25:43.511Z",
        scene_class_id=None,
        detection_model_id=1,
        classification_model_id=1,
        status_id=2,
        input_path="images\\img_3.png"
    ),
    Tasks(
        owner_id=2,
        # created_at="2024-04-25T18:25:43.511Z",
        scene_class_id=1,
        detection_model_id=1,
        classification_model_id=1,
        status_id=3,
        input_path="images\\img_4.png"
    )
]

dbPredictions = [
    PrimitivePredictions(
        task_id=1,
        primitive_class_id=1,
        x1_coord=0.1,
        y1_coord=0.1,
        x2_coord=0.2,
        y2_coord=0.2,
        x3_coord=0.3,
        y3_coord=0.3,
        x4_coord=0.4,
        y4_coord=0.4,
        probability=0.8
    ),
    PrimitivePredictions(
        task_id=1,
        primitive_class_id=2,
        x1_coord=0.2,
        y1_coord=0.2,
        x2_coord=0.3,
        y2_coord=0.3,
        x3_coord=0.4,
        y3_coord=0.4,
        x4_coord=0.5,
        y4_coord=0.5,
        probability=0.88
    ),
    PrimitivePredictions(
        task_id=1,
        primitive_class_id=3,
        x1_coord=0.3,
        y1_coord=0.3,
        x2_coord=0.4,
        y2_coord=0.4,
        x3_coord=0.5,
        y3_coord=0.5,
        x4_coord=0.6,
        y4_coord=0.6,
        probability=0.85
    ),
    PrimitivePredictions(
        task_id=4,
        primitive_class_id=3,
        x1_coord=0.4,
        y1_coord=0.4,
        x2_coord=0.5,
        y2_coord=0.5,
        x3_coord=0.6,
        y3_coord=0.6,
        x4_coord=0.7,
        y4_coord=0.7,
        probability=0.28
    ),
]

def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('classification_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('detection_models',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('primitive_class',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('primitive_class', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('primitive_class')
    )
    op.create_table('scene_class',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('scene_class', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('scene_class')
    )
    op.create_table('status',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('status')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('hashed_password', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id'),
    sa.UniqueConstraint('username')
    )
    op.create_table('tasks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('owner_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('scene_class_id', sa.Integer(), nullable=True),
    sa.Column('detection_model_id', sa.Integer(), nullable=False),
    sa.Column('classification_model_id', sa.Integer(), nullable=False),
    sa.Column('status_id', sa.Integer(), nullable=False),
    sa.Column('input_path', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['classification_model_id'], ['classification_models.id'], ),
    sa.ForeignKeyConstraint(['detection_model_id'], ['detection_models.id'], ),
    sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['scene_class_id'], ['scene_class.id'], ),
    sa.ForeignKeyConstraint(['status_id'], ['status.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('primitive_predictions',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('task_id', sa.Integer(), nullable=False),
    sa.Column('primitive_class_id', sa.Integer(), nullable=False),
    sa.Column('x1_coord', sa.Float(), nullable=False),
    sa.Column('y1_coord', sa.Float(), nullable=False),
    sa.Column('x2_coord', sa.Float(), nullable=False),
    sa.Column('y2_coord', sa.Float(), nullable=False),
    sa.Column('x3_coord', sa.Float(), nullable=False),
    sa.Column('y3_coord', sa.Float(), nullable=False),
    sa.Column('x4_coord', sa.Float(), nullable=False),
    sa.Column('y4_coord', sa.Float(), nullable=False),
    sa.Column('probability', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['primitive_class_id'], ['primitive_class.id'], ),
    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='cascade'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('id')
    )
    op.create_table('scene_class_predictions',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('task_id', sa.Integer(), nullable=False),
                    sa.Column('scene_class_id', sa.Integer(), nullable=False),
                    sa.Column('scene_class_prob', sa.Float(), nullable=False),
                    sa.ForeignKeyConstraint(['scene_class_id'], ['scene_class.id'], ),
                    sa.ForeignKeyConstraint(['task_id'], ['tasks.id'], ondelete='cascade'),
                    sa.PrimaryKeyConstraint('id'),
                    sa.UniqueConstraint('id')
                    )
    # ### end Alembic commands ###

    session = Session(bind=op.get_bind())

    for scene in dbSceneClasses:
        session.add(scene)
        session.commit()

    for primitive in dbPrimitiveClasses:
        session.add(primitive)
        session.commit()

    for status in dbStatuses:
        session.add(status)
        session.commit()

    for model in dbDModels:
        session.add(model)
        session.commit()

    for user in dbUsers:
        session.add(user)
        session.commit()

    for task in dbTasks:
        session.add(task)
        session.commit()

    for pred in dbPredictions:
        session.add(pred)
        session.commit()



def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('primitive_predictions')
    op.drop_table('tasks')
    op.drop_table('users')
    op.drop_table('status')
    op.drop_table('scene_class')
    op.drop_table('primitive_class')
    op.drop_table('detection_models')
    op.drop_table('classification_models')
    op.drop_table('scene_class_predictions')
    # ### end Alembic commands ###

    session = Session(bind=op.get_bind())

    for scene in dbSceneClasses:
        session.query(scene).delete()
        session.commit()

    for primitive in dbPrimitiveClasses:
        session.query(primitive).delete()
        session.commit()

    for status in dbStatuses:
        session.query(status).delete()
        session.commit()

    for model in dbDModels:
        session.query(model).delete()
        session.commit()

    for user in dbUsers:
        session.query(user).delete()
        session.commit()

    for task in dbTasks:
        session.query(task).delete()
        session.commit()

    for pred in dbPredictions:
        session.query(pred).delete()
        session.commit()
